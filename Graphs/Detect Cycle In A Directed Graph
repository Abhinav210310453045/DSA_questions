#include<bits/stdc++.h>
using namespace std;


int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  unordered_map<int,list<int>> adj;
  for(int i=0;i<edges.size();i++)
  {
    int u=edges[i].first;
    int v=edges[i].second;
    adj[u].push_back(v);
  }
  
  vector<int> indegree(n+1);
  for(int i=1;i<=n;i++)
  {
    for(auto j: adj[i])
    {
      indegree[j]++;
    }
  }
  
  queue<int> q;
  for(int i=1;i<=n;i++)
  {
    if(indegree[i]==0)
    {
      q.push(i);
    }
  }
 int count=0;
  while(!q.empty())
  {
    int front=q.front();
    q.pop();
    count++;
    for(auto neighbour: adj[front])
    {
      indegree[neighbour]--;
      if(indegree[neighbour]==0)
      {
        q.push(neighbour);
      }
      
    } 
  }
if(!(count==n))
{
  return true;
}
return false;
  
  
}
